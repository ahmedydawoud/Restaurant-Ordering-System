// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  address   String
  Cart      Cart?
  Orders    Order[]
}

model Product {
  productId   Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  cartId Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [userId])
  userId Int      @unique
  items  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [cartId])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [productId])
  productId Int
  quantity  Int
}

model Order {
  orderId    Int        @id @default(autoincrement())
  orderDate  DateTime   @default(now())
  status     OrderStatus 
  user       User       @relation(fields: [userId], references: [userId])
  userId     Int
  items      OrderItem[]
  price      Float      
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [orderId])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [productId])
  productId Int
  quantity  Int
  price     Float
}

model Coupon {
  couponId    Int      @id @default(autoincrement())
  code        String   @unique
  percentage  Float    // Discount percentage as a decimal (0.1 for 10%)
  validUntil  DateTime
}